apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.zhanghaochen.smalldemos"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    implementation 'com.android.support:gridlayout-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9"
}
def coverageSourceDirs = ['../app/src/main/java']
task jacocoTestReport(type: JacocoReport) {
    doFirst {
        delete('../report/testUnitTest.exec')
        delete('../report/androidTestUnitTest.ec')
        delete('../report/test-results/')
    }
    group = "Reporting"
    jacoco {
        reportsDir = file("../report/test-results/")
    }
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])

    def utilTest = '../app/build/jacoco/testDebugUnitTest.exec'
    def androidTestDir = '../app/build/outputs/code-coverage/connected/'
    def androidTest
    def androidTestFileName
    FileTree iotTree = fileTree(dir: androidTestDir, includes: ['*.ec'])
    iotTree.each {
        File file ->
            androidTestFileName = file.name
            androidTest = file.path
    }
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files(utilTest, androidTest)

    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        jacocoTestReport {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: "../app/build/intermediates/classes/debug/com/zhanghaochen/smalldemos",
                        exclude: [
                                '**/*$*.*',
                        ])
            })
        }
    }
}
task compressJacocoReport(type: Zip) {
    into('../jacocoReport') {
        from "../report/test-results/jacocoTestReport"
        baseName = 'jacocoReport'
    }

    into('../androidTestReport') {
        from "../app/build/reports/androidTests/connected"
        baseName = 'androidTestReport'
    }

    into('../unitTestReport') {
        from "../app/build/reports/tests/testDebugUnitTest"
        baseName = 'unitTestReport'
    }

    destinationDir file("../report/test-results")
}
repositories {
    mavenCentral()
}
